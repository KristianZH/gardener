/*
Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by netpol-gen. DO NOT EDIT.

package alicloud

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"sync"
	"time"

	"github.com/gardener/gardener/pkg/apis/garden/v1beta1"
	"github.com/gardener/gardener/pkg/client/kubernetes"
	"github.com/gardener/gardener/pkg/logger"
	. "github.com/gardener/gardener/test/integration/framework"
	networkpolicies "github.com/gardener/gardener/test/integration/framework/networkpolicies"
	. "github.com/gardener/gardener/test/integration/shoots"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/sirupsen/logrus"
	corev1 "k8s.io/api/core/v1"
	networkingv1 "k8s.io/api/networking/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/util/sets"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

var (
	kubeconfig     = flag.String("kubeconfig", "", "the path to the kubeconfig  of the garden cluster that will be used for integration tests")
	shootName      = flag.String("shootName", "", "the name of the shoot we want to test")
	shootNamespace = flag.String("shootNamespace", "", "the namespace name that the shoot resides in")
	logLevel       = flag.String("verbose", "", "verbosity level, when set, logging level will be DEBUG")
	cleanup        = flag.Bool("cleanup", false, "deletes the newly created / existing test shoot after the test suite is done")
)

const (
	InitializationTimeout = 600 * time.Second
	FinalizationTimeout   = 1800 * time.Second
	DefaultTestTimeout    = 10 * time.Second
)

func validateFlags() {
	if !StringSet(*kubeconfig) {
		Fail("you need to specify the correct path for the kubeconfig")
	}

	if !FileExists(*kubeconfig) {
		Fail("kubeconfig path does not exist")
	}
}

var _ = Describe("Network Policy Testing", func() {

	var (
		shootGardenerTest   *ShootGardenerTest
		shootTestOperations *GardenerTestOperation
		shootAppTestLogger  *logrus.Logger
		sharedResources     networkpolicies.SharedResources

		setGlobals = func(ctx context.Context) {

			validateFlags()
			shootAppTestLogger = logger.AddWriter(logger.NewLogger(*logLevel), GinkgoWriter)

			if StringSet(*shootName) {
				var err error
				shootGardenerTest, err = NewShootGardenerTest(*kubeconfig, nil, shootAppTestLogger)
				Expect(err).NotTo(HaveOccurred())

				shoot := &v1beta1.Shoot{ObjectMeta: metav1.ObjectMeta{Namespace: *shootNamespace, Name: *shootName}}
				shootTestOperations, err = NewGardenTestOperation(ctx, shootGardenerTest.GardenClient, shootAppTestLogger, shoot)
				Expect(err).NotTo(HaveOccurred())
			}
		}

		createBusyBox = func(ctx context.Context, npi *networkpolicies.NamespacedPodInfo, ports ...corev1.ContainerPort) {
			pod := &corev1.Pod{
				ObjectMeta: metav1.ObjectMeta{
					Name:      npi.PodName,
					Namespace: npi.Namespace,
					Labels:    npi.Labels,
				},
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						corev1.Container{
							// listen on on container port
							Args:  []string{"nc", "-lk", "-p", fmt.Sprint(npi.Port), "-e", "/bin/echo", "-s", "0.0.0.0"},
							Image: "busybox",
							Name:  "busybox",
							Ports: ports,
						},
					},
				},
			}
			err := shootTestOperations.SeedClient.Client().Create(ctx, pod)
			Expect(err).NotTo(HaveOccurred())

			err = shootTestOperations.WaitUntilPodIsRunning(ctx, pod.GetName(), npi.Namespace, shootTestOperations.SeedClient)
			Expect(err).NotTo(HaveOccurred())
		}

		getTargetPod = func(ctx context.Context, targetPod *networkpolicies.NamespacedPodInfo) *corev1.Pod {
			if !targetPod.CheckVersion(shootTestOperations.Shoot) {
				Skip("Target pod doesn't match Shoot version contstraints. Skipping.")
			}
			By(fmt.Sprintf("Checking that target Pod: %s is running", targetPod.PodName))
			err := shootTestOperations.WaitUntilPodIsRunningWithLabels(ctx, targetPod.Selector(), targetPod.Namespace, shootTestOperations.SeedClient)
			ExpectWithOffset(1, err).NotTo(HaveOccurred())

			By(fmt.Sprintf("Get target pod: %s", targetPod.PodName))
			trgPod, err := shootTestOperations.GetFirstRunningPodWithLabels(ctx, targetPod.Selector(), targetPod.Namespace, shootTestOperations.SeedClient)
			ExpectWithOffset(1, err).NotTo(HaveOccurred())

			return trgPod
		}

		establishConnectionToHost = func(ctx context.Context, sourcePod *networkpolicies.NamespacedPodInfo, host string, port int32) (io.Reader, error) {
			if !sourcePod.CheckVersion(shootTestOperations.Shoot) {
				Skip("Source pod doesn't match Shoot version contstraints. Skipping.")
			}
			By(fmt.Sprintf("Checking for source Pod: %s is running", sourcePod.PodName))
			err := shootTestOperations.WaitUntilPodIsRunningWithLabels(ctx, sourcePod.Selector(), sourcePod.Namespace, shootTestOperations.SeedClient)
			ExpectWithOffset(1, err).NotTo(HaveOccurred())

			By(fmt.Sprintf("Executing connectivity command from %s/%s to %s:%d", sourcePod.Namespace, sourcePod.PodName, host, port))
			command := fmt.Sprintf("nc -v -z -w 3 %s %d", host, port)

			return shootTestOperations.PodExecByLabel(ctx, sourcePod.Selector(), "busybox", command, sourcePod.Namespace, shootTestOperations.SeedClient)
		}

		getFirstNodeInternalIP = func(ctx context.Context, cl kubernetes.Interface) (string, error) {
			nodes := &corev1.NodeList{}
			err := cl.Client().List(ctx, &client.ListOptions{Raw: &metav1.ListOptions{Limit: 1}}, nodes)
			if err != nil {
				return "", err
			}

			if len(nodes.Items) > 0 {
				firstNode := nodes.Items[0]
				for _, address := range firstNode.Status.Addresses {
					if address.Type == corev1.NodeInternalIP {
						return address.Address, nil
					}
				}
			}

			return "", ErrNoInternalIPsForNodeWasFound
		}

		assertCannotConnectToHost = func(ctx context.Context, sourcePod *networkpolicies.NamespacedPodInfo, host string, port int32) {
			r, err := establishConnectionToHost(ctx, sourcePod, host, port)
			ExpectWithOffset(1, err).To(HaveOccurred())
			bytes, err := ioutil.ReadAll(r)
			ExpectWithOffset(1, err).NotTo(HaveOccurred())

			By("Connection message is timed out\n")
			ExpectWithOffset(1, string(bytes)).To(SatisfyAny(ContainSubstring("Connection timed out"), ContainSubstring("nc: bad address")))
		}

		assertCannotConnectToPod = func(ctx context.Context, sourcePod *networkpolicies.NamespacedPodInfo, targetPod *networkpolicies.NamespacedPodInfo) {
			pod := getTargetPod(ctx, targetPod)
			assertCannotConnectToHost(ctx, sourcePod, pod.Status.PodIP, targetPod.Port)
		}

		assertConnectToHost = func(ctx context.Context, sourcePod *networkpolicies.NamespacedPodInfo, targetHost *networkpolicies.Host, allowed bool) {
			r, err := establishConnectionToHost(ctx, sourcePod, targetHost.HostName, targetHost.Port)
			if allowed {
				ExpectWithOffset(1, err).NotTo(HaveOccurred())
				ExpectWithOffset(1, r).NotTo(BeNil())
			} else {
				ExpectWithOffset(1, err).To(HaveOccurred())
				bytes, err := ioutil.ReadAll(r)
				ExpectWithOffset(1, err).NotTo(HaveOccurred())

				By("Connection message is timed out\n")
				ExpectWithOffset(1, string(bytes)).To(SatisfyAny(ContainSubstring("Connection timed out"), ContainSubstring("nc: bad address")))
			}
		}

		assertConnectToPod = func(ctx context.Context, sourcePod *networkpolicies.NamespacedPodInfo, targetPod *networkpolicies.NamespacedPodInfo, allowed bool) {
			pod := getTargetPod(ctx, targetPod)
			assertConnectToHost(ctx, sourcePod, &networkpolicies.Host{
				HostName: pod.Status.PodIP,
				Port:     targetPod.Port,
			}, allowed)
		}

		// generated targets
		KubeSchedulerHttp10251 = &networkpolicies.PodInfo{
			PodName:  "kube-scheduler-http",
			Port:     10251,
			PortName: "",
			Labels: labels.Set{
				"app":                     "kubernetes",
				"garden.sapcloud.io/role": "controlplane",
				"role":                    "scheduler"},
			ExpectedPolicies: sets.String{
				"allow-from-prometheus":    sets.Empty{},
				"allow-to-dns":             sets.Empty{},
				"allow-to-shoot-apiserver": sets.Empty{},
				"deny-all":                 sets.Empty{}},
			ShootVersionConstraint: "< 1.13"}
		KubeStateMetricsSeed8080 = &networkpolicies.PodInfo{
			PodName:  "kube-state-metrics-seed",
			Port:     8080,
			PortName: "",
			Labels: labels.Set{
				"component":               "kube-state-metrics",
				"garden.sapcloud.io/role": "monitoring",
				"type":                    "seed"},
			ExpectedPolicies: sets.String{
				"allow-from-prometheus":   sets.Empty{},
				"allow-to-dns":            sets.Empty{},
				"allow-to-seed-apiserver": sets.Empty{},
				"deny-all":                sets.Empty{}},
			ShootVersionConstraint: ""}
		ExternalhostPort53 = &networkpolicies.Host{
			Description: "External host",
			HostName:    "8.8.8.8",
			Port:        53}
		SeedKubeAPIServerPort443 = &networkpolicies.Host{
			Description: "Seed Kube APIServer",
			HostName:    "kubernetes.default",
			Port:        443}
		KubeApiserver443 = &networkpolicies.PodInfo{
			PodName:  "kube-apiserver",
			Port:     443,
			PortName: "",
			Labels: labels.Set{
				"app":  "kubernetes",
				"role": "apiserver"},
			ExpectedPolicies: sets.String{
				"allow-from-prometheus":     sets.Empty{},
				"allow-kube-apiserver":      sets.Empty{},
				"allow-to-dns":              sets.Empty{},
				"allow-to-private-networks": sets.Empty{},
				"allow-to-public-networks":  sets.Empty{},
				"allow-to-shoot-networks":   sets.Empty{},
				"deny-all":                  sets.Empty{}},
			ShootVersionConstraint: ""}
		KubeControllerManagerHttps10257 = &networkpolicies.PodInfo{
			PodName:  "kube-controller-manager-https",
			Port:     10257,
			PortName: "",
			Labels: labels.Set{
				"app":                     "kubernetes",
				"garden.sapcloud.io/role": "controlplane",
				"role":                    "controller-manager"},
			ExpectedPolicies: sets.String{
				"allow-from-prometheus":    sets.Empty{},
				"allow-to-dns":             sets.Empty{},
				"allow-to-shoot-apiserver": sets.Empty{},
				"deny-all":                 sets.Empty{}},
			ShootVersionConstraint: ">= 1.13"}
		Grafana3000 = &networkpolicies.PodInfo{
			PodName:  "grafana",
			Port:     3000,
			PortName: "",
			Labels: labels.Set{
				"component":               "grafana",
				"garden.sapcloud.io/role": "monitoring"},
			ExpectedPolicies: sets.String{
				"allow-grafana": sets.Empty{},
				"allow-to-dns":  sets.Empty{},
				"deny-all":      sets.Empty{}},
			ShootVersionConstraint: ""}
		Prometheus9090 = &networkpolicies.PodInfo{
			PodName:  "prometheus",
			Port:     9090,
			PortName: "",
			Labels: labels.Set{
				"app":                     "prometheus",
				"garden.sapcloud.io/role": "monitoring",
				"role":                    "monitoring"},
			ExpectedPolicies: sets.String{
				"allow-prometheus":         sets.Empty{},
				"allow-to-dns":             sets.Empty{},
				"allow-to-public-networks": sets.Empty{},
				"allow-to-seed-apiserver":  sets.Empty{},
				"allow-to-shoot-apiserver": sets.Empty{},
				"allow-to-shoot-networks":  sets.Empty{},
				"deny-all":                 sets.Empty{}},
			ShootVersionConstraint: ""}
		MetadataservicePort80 = &networkpolicies.Host{
			Description: "Metadata service",
			HostName:    "100.100.100.200",
			Port:        80}
		EtcdMain2379 = &networkpolicies.PodInfo{
			PodName:  "etcd-main",
			Port:     2379,
			PortName: "",
			Labels: labels.Set{
				"app":                     "etcd-statefulset",
				"garden.sapcloud.io/role": "controlplane",
				"role":                    "main"},
			ExpectedPolicies: sets.String{
				"allow-etcd":                sets.Empty{},
				"allow-to-dns":              sets.Empty{},
				"allow-to-private-networks": sets.Empty{},
				"allow-to-public-networks":  sets.Empty{},
				"deny-all":                  sets.Empty{}},
			ShootVersionConstraint: ""}
		EtcdEvents2379 = &networkpolicies.PodInfo{
			PodName:  "etcd-events",
			Port:     2379,
			PortName: "",
			Labels: labels.Set{
				"app":                     "etcd-statefulset",
				"garden.sapcloud.io/role": "controlplane",
				"role":                    "events"},
			ExpectedPolicies: sets.String{
				"allow-etcd":                sets.Empty{},
				"allow-to-dns":              sets.Empty{},
				"allow-to-private-networks": sets.Empty{},
				"allow-to-public-networks":  sets.Empty{},
				"deny-all":                  sets.Empty{}},
			ShootVersionConstraint: ""}
		KibanaLogging5601 = &networkpolicies.PodInfo{
			PodName:  "kibana-logging",
			Port:     5601,
			PortName: "",
			Labels: labels.Set{
				"app":                     "kibana-logging",
				"garden.sapcloud.io/role": "logging",
				"role":                    "logging"},
			ExpectedPolicies: sets.String{
				"allow-kibana":           sets.Empty{},
				"allow-to-dns":           sets.Empty{},
				"allow-to-elasticsearch": sets.Empty{},
				"deny-all":               sets.Empty{}},
			ShootVersionConstraint: ""}
		KubeStateMetricsShoot8080 = &networkpolicies.PodInfo{
			PodName:  "kube-state-metrics-shoot",
			Port:     8080,
			PortName: "",
			Labels: labels.Set{
				"component":               "kube-state-metrics",
				"garden.sapcloud.io/role": "monitoring",
				"type":                    "shoot"},
			ExpectedPolicies: sets.String{
				"allow-from-prometheus":    sets.Empty{},
				"allow-to-dns":             sets.Empty{},
				"allow-to-shoot-apiserver": sets.Empty{},
				"deny-all":                 sets.Empty{}},
			ShootVersionConstraint: ""}
		KubeAddonManager9090 = &networkpolicies.PodInfo{
			PodName:  "kube-addon-manager",
			Port:     9090,
			PortName: "",
			Labels: labels.Set{
				"app":                     "kubernetes",
				"garden.sapcloud.io/role": "controlplane",
				"role":                    "addon-manager"},
			ExpectedPolicies: sets.String{
				"allow-to-dns":             sets.Empty{},
				"allow-to-shoot-apiserver": sets.Empty{},
				"deny-all":                 sets.Empty{}},
			ShootVersionConstraint: ""}
		CsiPluginController80 = &networkpolicies.PodInfo{
			PodName:  "csi-plugin-controller",
			Port:     80,
			PortName: "",
			Labels: labels.Set{
				"app":                     "kubernetes",
				"garden.sapcloud.io/role": "controlplane",
				"role":                    "csi-plugin-controller"},
			ExpectedPolicies: sets.String{
				"allow-to-dns":              sets.Empty{},
				"allow-to-private-networks": sets.Empty{},
				"allow-to-public-networks":  sets.Empty{},
				"allow-to-shoot-apiserver":  sets.Empty{},
				"deny-all":                  sets.Empty{}},
			ShootVersionConstraint: ""}
		GardenPrometheusPort80 = &networkpolicies.Host{
			Description: "Garden Prometheus",
			HostName:    "prometheus-web.garden",
			Port:        80}
		KubeSchedulerHttps10259 = &networkpolicies.PodInfo{
			PodName:  "kube-scheduler-https",
			Port:     10259,
			PortName: "",
			Labels: labels.Set{
				"app":                     "kubernetes",
				"garden.sapcloud.io/role": "controlplane",
				"role":                    "scheduler"},
			ExpectedPolicies: sets.String{
				"allow-from-prometheus":    sets.Empty{},
				"allow-to-dns":             sets.Empty{},
				"allow-to-shoot-apiserver": sets.Empty{},
				"deny-all":                 sets.Empty{}},
			ShootVersionConstraint: ">= 1.13"}
		CloudControllerManagerHttp10253 = &networkpolicies.PodInfo{
			PodName:  "cloud-controller-manager-http",
			Port:     10253,
			PortName: "",
			Labels: labels.Set{
				"app":                     "kubernetes",
				"garden.sapcloud.io/role": "controlplane",
				"role":                    "cloud-controller-manager"},
			ExpectedPolicies: sets.String{
				"allow-from-prometheus":     sets.Empty{},
				"allow-to-dns":              sets.Empty{},
				"allow-to-metadata":         sets.Empty{},
				"allow-to-private-networks": sets.Empty{},
				"allow-to-public-networks":  sets.Empty{},
				"allow-to-shoot-apiserver":  sets.Empty{},
				"deny-all":                  sets.Empty{}},
			ShootVersionConstraint: ""}
		MachineControllerManager10258 = &networkpolicies.PodInfo{
			PodName:  "machine-controller-manager",
			Port:     10258,
			PortName: "",
			Labels: labels.Set{
				"app":                     "kubernetes",
				"garden.sapcloud.io/role": "controlplane",
				"role":                    "machine-controller-manager"},
			ExpectedPolicies: sets.String{
				"allow-from-prometheus":     sets.Empty{},
				"allow-to-dns":              sets.Empty{},
				"allow-to-private-networks": sets.Empty{},
				"allow-to-public-networks":  sets.Empty{},
				"allow-to-seed-apiserver":   sets.Empty{},
				"allow-to-shoot-apiserver":  sets.Empty{},
				"deny-all":                  sets.Empty{}},
			ShootVersionConstraint: ""}
		KubeControllerManagerHttp10252 = &networkpolicies.PodInfo{
			PodName:  "kube-controller-manager-http",
			Port:     10252,
			PortName: "",
			Labels: labels.Set{
				"app":                     "kubernetes",
				"garden.sapcloud.io/role": "controlplane",
				"role":                    "controller-manager"},
			ExpectedPolicies: sets.String{
				"allow-from-prometheus":    sets.Empty{},
				"allow-to-dns":             sets.Empty{},
				"allow-to-shoot-apiserver": sets.Empty{},
				"deny-all":                 sets.Empty{}},
			ShootVersionConstraint: "< 1.13"}
		ElasticsearchLogging9200 = &networkpolicies.PodInfo{
			PodName:  "elasticsearch-logging",
			Port:     9200,
			PortName: "",
			Labels: labels.Set{
				"app":                     "elasticsearch-logging",
				"garden.sapcloud.io/role": "logging",
				"role":                    "logging"},
			ExpectedPolicies: sets.String{
				"allow-elasticsearch": sets.Empty{},
				"deny-all":            sets.Empty{}},
			ShootVersionConstraint: ""}
	)

	SynchronizedBeforeSuite(func() []byte {
		ctx, cancel := context.WithTimeout(context.TODO(), time.Minute)
		defer cancel()

		setGlobals(ctx)
		var err error

		By("Creating namespace for Ingress testing")
		ns, err := shootTestOperations.SeedClient.CreateNamespace(
			&corev1.Namespace{
				ObjectMeta: metav1.ObjectMeta{
					GenerateName: "gardener-e2e-network-policies-",
					Labels: map[string]string{
						"gardener-e2e-test": "networkpolicies",
					},
				},
			}, true)

		Expect(err).NotTo(HaveOccurred())

		sharedResources.External = ns.GetName()

		By("Creating mirror namespace for pod2pod network testing")
		mirrorNamespace, err := shootTestOperations.SeedClient.CreateNamespace(
			&corev1.Namespace{
				ObjectMeta: metav1.ObjectMeta{
					GenerateName: "gardener-e2e-mirror-network-policies-",
					Labels: map[string]string{
						"gardener-e2e-test": "networkpolicies",
					},
				},
			}, true)
		Expect(err).NotTo(HaveOccurred())

		sharedResources.Mirror = mirrorNamespace.GetName()

		By(fmt.Sprintf("Getting all network policies in namespace %q", shootTestOperations.ShootSeedNamespace()))
		list := &networkingv1.NetworkPolicyList{}
		err = shootTestOperations.SeedClient.Client().List(ctx, &client.ListOptions{Namespace: shootTestOperations.ShootSeedNamespace()}, list)
		Expect(err).ToNot(HaveOccurred())

		sharedResources.Policies = list.Items

		for _, netPol := range sharedResources.Policies {
			cpy := &networkingv1.NetworkPolicy{}
			cpy.Name = netPol.Name
			cpy.Namespace = sharedResources.Mirror
			cpy.Spec = *netPol.Spec.DeepCopy()
			By(fmt.Sprintf("Copying network policy %s in namespace %q", netPol.Name, sharedResources.Mirror))
			err = shootTestOperations.SeedClient.Client().Create(ctx, cpy)
			Expect(err).NotTo(HaveOccurred())
		}

		By("Getting the current CloudProvider")
		currentProvider, err := shootTestOperations.GetCloudProvider()
		Expect(err).NotTo(HaveOccurred())

		By("Getting fist running node")
		sharedResources.SeedNodeIP, err = getFirstNodeInternalIP(ctx, shootTestOperations.SeedClient)
		Expect(err).NotTo(HaveOccurred())

		// this provider is generated
		cloudAwarePodInfo := networkpolicies.AlicloudPodInfo{}

		if currentProvider != cloudAwarePodInfo.Provider() {
			Fail(fmt.Sprintf("Not suported cloud provider %s", currentProvider))
		}

		sources := cloudAwarePodInfo.ToSources()

		var wg sync.WaitGroup
		wg.Add(len(sources))

		for _, s := range sources {
			go func(pi *networkpolicies.PodInfo) {
				defer GinkgoRecover()
				defer wg.Done()
				if !pi.CheckVersion(shootTestOperations.Shoot) {
					return
				}
				pod, err := shootTestOperations.GetFirstRunningPodWithLabels(ctx, pi.Selector(), shootTestOperations.ShootSeedNamespace(), shootTestOperations.SeedClient)
				Expect(err).NotTo(HaveOccurred())
				cpy := *pi

				targetLabels := make(map[string]string)

				for k, v := range pod.Labels {
					targetLabels[k] = v
				}

				cpy.Labels = targetLabels
				By(fmt.Sprintf("Mirroring Pod %s to namespace %s", cpy.Labels.String(), sharedResources.Mirror))

				containerPorts := []corev1.ContainerPort{}

				for _, container := range pod.Spec.Containers {
					if len(container.Ports) > 0 {
						containerPorts = append(containerPorts, container.Ports...)
					}
				}
				createBusyBox(ctx, networkpolicies.NewNamespacedPodInfo(&cpy, sharedResources.Mirror), containerPorts...)
			}(s.Pod)
		}
		wg.Wait()

		createBusyBox(ctx, networkpolicies.NewNamespacedPodInfo(networkpolicies.BusyboxInfo, ns.GetName()))

		b, err := json.Marshal(sharedResources)
		Expect(err).NotTo(HaveOccurred())

		return b
	}, func(data []byte) {
		ctx, cancel := context.WithTimeout(context.TODO(), DefaultTestTimeout)
		defer cancel()

		sr := &networkpolicies.SharedResources{}
		err := json.Unmarshal(data, sr)
		Expect(err).NotTo(HaveOccurred())

		setGlobals(ctx)

		sharedResources = *sr
	})

	SynchronizedAfterSuite(func() {
		if !*cleanup {
			return
		}

		ctx, cancel := context.WithTimeout(context.TODO(), DefaultTestTimeout)
		defer cancel()

		setGlobals(ctx)

		namespaces := &corev1.NamespaceList{}
		selector := &client.ListOptions{
			LabelSelector: labels.SelectorFromSet(labels.Set{
				"gardener-e2e-test": "networkpolicies",
			}),
		}
		err := shootTestOperations.SeedClient.Client().List(ctx, selector, namespaces)
		Expect(err).NotTo(HaveOccurred())

		for _, ns := range namespaces.Items {
			err = shootTestOperations.SeedClient.Client().Delete(ctx, &ns)
			if err != nil && !errors.IsConflict(err) {
				Expect(err).NotTo(HaveOccurred())
			}
		}
	}, func() {})

	Context("Deprecated old policies are removed", func() {

		const (
			deprecatedKubeAPIServerPolicy = "kube-apiserver-default"
			deprecatedMetadataAppPolicy   = "cloud-metadata-service-deny-blacklist-app"
			deprecatedMetadataRolePolicy  = "cloud-metadata-service-deny-blacklist-role"
		)

		var (
			assertPolicyIsGone = func(policyName string) func(ctx context.Context) {
				return func(ctx context.Context) {
					By(fmt.Sprintf("Getting network policy %q in namespace %q", policyName, shootTestOperations.ShootSeedNamespace()))
					getErr := shootTestOperations.SeedClient.Client().Get(ctx, types.NamespacedName{Name: policyName, Namespace: shootTestOperations.ShootSeedNamespace()}, &networkingv1.NetworkPolicy{})
					Expect(getErr).To(HaveOccurred())
					By("error is NotFound")
					Expect(errors.IsNotFound(getErr)).To(BeTrue())
				}
			}
		)

		CIt(deprecatedKubeAPIServerPolicy, assertPolicyIsGone(deprecatedKubeAPIServerPolicy), DefaultTestTimeout)
		CIt(deprecatedMetadataAppPolicy, assertPolicyIsGone(deprecatedMetadataAppPolicy), DefaultTestTimeout)
		CIt(deprecatedMetadataRolePolicy, assertPolicyIsGone(deprecatedMetadataRolePolicy), DefaultTestTimeout)
	})

	Context("components are selected by correct policies", func() {
		var (
			assertHasNetworkPolicy = func(podInfo *networkpolicies.PodInfo) func(context.Context) {
				return func(ctx context.Context) {
					if !podInfo.CheckVersion(shootTestOperations.Shoot) {
						Skip("Component doesn't match Shoot version contstraints. Skipping.")
					}

					matched := sets.NewString()
					var podLabelSet labels.Set

					By(fmt.Sprintf("Getting first running pod with selectors %q in namespace %q", podInfo.Labels, shootTestOperations.ShootSeedNamespace()))
					pod, err := shootTestOperations.GetFirstRunningPodWithLabels(ctx, podInfo.Selector(), shootTestOperations.ShootSeedNamespace(), shootTestOperations.SeedClient)
					podLabelSet = pod.GetLabels()
					Expect(err).NotTo(HaveOccurred())

					for _, netPol := range sharedResources.Policies {
						netPolSelector, err := metav1.LabelSelectorAsSelector(&netPol.Spec.PodSelector)
						Expect(err).NotTo(HaveOccurred())

						if netPolSelector.Matches(podLabelSet) {
							matched.Insert(netPol.GetName())
						}
					}
					By(fmt.Sprintf("Matching actual network policies against expected %s", podInfo.ExpectedPolicies.List()))
					Expect(matched.List()).Should(ConsistOf(podInfo.ExpectedPolicies.List()))
				}
			}
		)
		CIt("kube-apiserver", assertHasNetworkPolicy(KubeApiserver443), 10*time.Second)
		CIt("etcd-main", assertHasNetworkPolicy(EtcdMain2379), 10*time.Second)
		CIt("etcd-events", assertHasNetworkPolicy(EtcdEvents2379), 10*time.Second)
		CIt("cloud-controller-manager-http", assertHasNetworkPolicy(CloudControllerManagerHttp10253), 10*time.Second)
		CIt("elasticsearch-logging", assertHasNetworkPolicy(ElasticsearchLogging9200), 10*time.Second)
		CIt("grafana", assertHasNetworkPolicy(Grafana3000), 10*time.Second)
		CIt("kibana-logging", assertHasNetworkPolicy(KibanaLogging5601), 10*time.Second)
		CIt("kube-addon-manager", assertHasNetworkPolicy(KubeAddonManager9090), 10*time.Second)
		CIt("kube-controller-manager-https", assertHasNetworkPolicy(KubeControllerManagerHttps10257), 10*time.Second)
		CIt("kube-controller-manager-http", assertHasNetworkPolicy(KubeControllerManagerHttp10252), 10*time.Second)
		CIt("kube-scheduler-http", assertHasNetworkPolicy(KubeSchedulerHttp10251), 10*time.Second)
		CIt("kube-scheduler-https", assertHasNetworkPolicy(KubeSchedulerHttps10259), 10*time.Second)
		CIt("kube-state-metrics-shoot", assertHasNetworkPolicy(KubeStateMetricsShoot8080), 10*time.Second)
		CIt("kube-state-metrics-seed", assertHasNetworkPolicy(KubeStateMetricsSeed8080), 10*time.Second)
		CIt("machine-controller-manager", assertHasNetworkPolicy(MachineControllerManager10258), 10*time.Second)
		CIt("csi-plugin-controller", assertHasNetworkPolicy(CsiPluginController80), 10*time.Second)
		CIt("prometheus", assertHasNetworkPolicy(Prometheus9090), 10*time.Second)
	})

	Context("ingress from other namespaces", func() {

		var (
			assertBlockIngress = func(to *networkpolicies.PodInfo, allowed bool) func(context.Context) {
				return func(ctx context.Context) {
					assertConnectToPod(ctx, networkpolicies.NewNamespacedPodInfo(networkpolicies.BusyboxInfo, sharedResources.External), networkpolicies.NewNamespacedPodInfo(to, shootTestOperations.ShootSeedNamespace()), allowed)
				}
			}
		)

		CIt("should allow connection to kube-apiserver at port 443", assertBlockIngress(KubeApiserver443, true), DefaultTestTimeout)
		CIt("should block connection to kube-controller-manager-https at port 10257", assertBlockIngress(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
		CIt("should block connection to kube-controller-manager-http at port 10252", assertBlockIngress(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
		CIt("should block connection to kube-scheduler-http at port 10251", assertBlockIngress(KubeSchedulerHttp10251, false), DefaultTestTimeout)
		CIt("should block connection to kube-scheduler-https at port 10259", assertBlockIngress(KubeSchedulerHttps10259, false), DefaultTestTimeout)
		CIt("should block connection to etcd-main at port 2379", assertBlockIngress(EtcdMain2379, false), DefaultTestTimeout)
		CIt("should block connection to etcd-events at port 2379", assertBlockIngress(EtcdEvents2379, false), DefaultTestTimeout)
		CIt("should block connection to cloud-controller-manager-http at port 10253", assertBlockIngress(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
		CIt("should block connection to elasticsearch-logging at port 9200", assertBlockIngress(ElasticsearchLogging9200, false), DefaultTestTimeout)
		CIt("should block connection to grafana at port 3000", assertBlockIngress(Grafana3000, false), DefaultTestTimeout)
		CIt("should block connection to kibana-logging at port 5601", assertBlockIngress(KibanaLogging5601, false), DefaultTestTimeout)
		CIt("should block connection to kube-state-metrics-seed at port 8080", assertBlockIngress(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
		CIt("should block connection to kube-state-metrics-shoot at port 8080", assertBlockIngress(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
		CIt("should block connection to machine-controller-manager at port 10258", assertBlockIngress(MachineControllerManager10258, false), DefaultTestTimeout)
		CIt("should block connection to prometheus at port 9090", assertBlockIngress(Prometheus9090, false), DefaultTestTimeout)
		CIt("should block connection to kube-addon-manager at port 9090", assertBlockIngress(KubeAddonManager9090, false), DefaultTestTimeout)
		CIt("should block connection to csi-plugin-controller at port 80", assertBlockIngress(CsiPluginController80, false), DefaultTestTimeout)
	})

	Context("egress to other namespaces", func() {

		var (
			assertBlockEgresss = func(from *networkpolicies.PodInfo) func(context.Context) {
				return func(ctx context.Context) {
					assertCannotConnectToPod(ctx, networkpolicies.NewNamespacedPodInfo(from, sharedResources.Mirror), networkpolicies.NewNamespacedPodInfo(networkpolicies.BusyboxInfo, sharedResources.External))
				}
			}
		)

		CIt("should block connectivity from kube-apiserver to busybox", assertBlockEgresss(KubeApiserver443), DefaultTestTimeout)
		CIt("should block connectivity from etcd-main to busybox", assertBlockEgresss(EtcdMain2379), DefaultTestTimeout)
		CIt("should block connectivity from etcd-events to busybox", assertBlockEgresss(EtcdEvents2379), DefaultTestTimeout)
		CIt("should block connectivity from cloud-controller-manager-http to busybox", assertBlockEgresss(CloudControllerManagerHttp10253), DefaultTestTimeout)
		CIt("should block connectivity from elasticsearch-logging to busybox", assertBlockEgresss(ElasticsearchLogging9200), DefaultTestTimeout)
		CIt("should block connectivity from grafana to busybox", assertBlockEgresss(Grafana3000), DefaultTestTimeout)
		CIt("should block connectivity from kibana-logging to busybox", assertBlockEgresss(KibanaLogging5601), DefaultTestTimeout)
		CIt("should block connectivity from kube-addon-manager to busybox", assertBlockEgresss(KubeAddonManager9090), DefaultTestTimeout)
		CIt("should block connectivity from kube-controller-manager-https to busybox", assertBlockEgresss(KubeControllerManagerHttps10257), DefaultTestTimeout)
		CIt("should block connectivity from kube-controller-manager-http to busybox", assertBlockEgresss(KubeControllerManagerHttp10252), DefaultTestTimeout)
		CIt("should block connectivity from kube-scheduler-http to busybox", assertBlockEgresss(KubeSchedulerHttp10251), DefaultTestTimeout)
		CIt("should block connectivity from kube-scheduler-https to busybox", assertBlockEgresss(KubeSchedulerHttps10259), DefaultTestTimeout)
		CIt("should block connectivity from kube-state-metrics-shoot to busybox", assertBlockEgresss(KubeStateMetricsShoot8080), DefaultTestTimeout)
		CIt("should block connectivity from kube-state-metrics-seed to busybox", assertBlockEgresss(KubeStateMetricsSeed8080), DefaultTestTimeout)
		CIt("should block connectivity from machine-controller-manager to busybox", assertBlockEgresss(MachineControllerManager10258), DefaultTestTimeout)
		CIt("should block connectivity from csi-plugin-controller to busybox", assertBlockEgresss(CsiPluginController80), DefaultTestTimeout)
		CIt("should block connectivity from prometheus to busybox", assertBlockEgresss(Prometheus9090), DefaultTestTimeout)
	})

	Context("egress to Seed nodes", func() {

		var (
			assertBlockToSeedNodes = func(from *networkpolicies.PodInfo) func(context.Context) {
				return func(ctx context.Context) {
					assertCannotConnectToHost(ctx, networkpolicies.NewNamespacedPodInfo(from, sharedResources.Mirror), sharedResources.SeedNodeIP, 10250)
				}
			}
		)

		CIt("should block connectivity from kube-apiserver", assertBlockToSeedNodes(KubeApiserver443), DefaultTestTimeout)
		CIt("should block connectivity from etcd-main", assertBlockToSeedNodes(EtcdMain2379), DefaultTestTimeout)
		CIt("should block connectivity from etcd-events", assertBlockToSeedNodes(EtcdEvents2379), DefaultTestTimeout)
		CIt("should block connectivity from cloud-controller-manager-http", assertBlockToSeedNodes(CloudControllerManagerHttp10253), DefaultTestTimeout)
		CIt("should block connectivity from elasticsearch-logging", assertBlockToSeedNodes(ElasticsearchLogging9200), DefaultTestTimeout)
		CIt("should block connectivity from grafana", assertBlockToSeedNodes(Grafana3000), DefaultTestTimeout)
		CIt("should block connectivity from kibana-logging", assertBlockToSeedNodes(KibanaLogging5601), DefaultTestTimeout)
		CIt("should block connectivity from kube-addon-manager", assertBlockToSeedNodes(KubeAddonManager9090), DefaultTestTimeout)
		CIt("should block connectivity from kube-controller-manager-https", assertBlockToSeedNodes(KubeControllerManagerHttps10257), DefaultTestTimeout)
		CIt("should block connectivity from kube-controller-manager-http", assertBlockToSeedNodes(KubeControllerManagerHttp10252), DefaultTestTimeout)
		CIt("should block connectivity from kube-scheduler-http", assertBlockToSeedNodes(KubeSchedulerHttp10251), DefaultTestTimeout)
		CIt("should block connectivity from kube-scheduler-https", assertBlockToSeedNodes(KubeSchedulerHttps10259), DefaultTestTimeout)
		CIt("should block connectivity from kube-state-metrics-shoot", assertBlockToSeedNodes(KubeStateMetricsShoot8080), DefaultTestTimeout)
		CIt("should block connectivity from kube-state-metrics-seed", assertBlockToSeedNodes(KubeStateMetricsSeed8080), DefaultTestTimeout)
		CIt("should block connectivity from machine-controller-manager", assertBlockToSeedNodes(MachineControllerManager10258), DefaultTestTimeout)
		CIt("should block connectivity from csi-plugin-controller", assertBlockToSeedNodes(CsiPluginController80), DefaultTestTimeout)
		CIt("should block connectivity from prometheus", assertBlockToSeedNodes(Prometheus9090), DefaultTestTimeout)
	})

	Context("egress for mirrored pods", func() {

		var (
			sourcePod *networkpolicies.PodInfo

			assertEgresssToMirroredPod = func(targetPod *networkpolicies.PodInfo, allowed bool) func(context.Context) {
				return func(ctx context.Context) {
					assertConnectToPod(ctx, networkpolicies.NewNamespacedPodInfo(sourcePod, sharedResources.Mirror), networkpolicies.NewNamespacedPodInfo(targetPod, sharedResources.Mirror), allowed)
				}
			}

			assertEgresssToHost = func(targetHost *networkpolicies.Host, allowed bool) func(context.Context) {
				return func(ctx context.Context) {
					assertConnectToHost(ctx, networkpolicies.NewNamespacedPodInfo(sourcePod, sharedResources.Mirror), targetHost, allowed)
				}
			}
		)

		Context("kube-apiserver", func() {

			BeforeEach(func() {
				sourcePod = KubeApiserver443
			})

			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should allow connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, true), DefaultTestTimeout)
			CIt("should allow connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, true), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should allow connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, true), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
			CIt("should allow connection to Seed Kube APIServer (kubernetes.default:443)", assertEgresssToHost(SeedKubeAPIServerPort443, true), DefaultTestTimeout)
		})

		Context("etcd-main", func() {

			BeforeEach(func() {
				sourcePod = EtcdMain2379
			})

			CIt("should block connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should block connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, false), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should allow connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, true), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
		})

		Context("etcd-events", func() {

			BeforeEach(func() {
				sourcePod = EtcdEvents2379
			})

			CIt("should block connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should block connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, false), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should allow connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, true), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
		})

		Context("cloud-controller-manager-http", func() {

			BeforeEach(func() {
				sourcePod = CloudControllerManagerHttp10253
			})

			CIt("should allow connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, true), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should block connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, false), DefaultTestTimeout)
			CIt("should block connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, false), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should allow connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, true), DefaultTestTimeout)
			CIt("should allow connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, true), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
		})

		Context("elasticsearch-logging", func() {

			BeforeEach(func() {
				sourcePod = ElasticsearchLogging9200
			})

			CIt("should block connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should block connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, false), DefaultTestTimeout)
			CIt("should block connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, false), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should block connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, false), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
		})

		Context("grafana", func() {

			BeforeEach(func() {
				sourcePod = Grafana3000
			})

			CIt("should block connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should block connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, false), DefaultTestTimeout)
			CIt("should block connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, false), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should allow connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, true), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should block connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, false), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
		})

		Context("kibana-logging", func() {

			BeforeEach(func() {
				sourcePod = KibanaLogging5601
			})

			CIt("should block connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should block connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, false), DefaultTestTimeout)
			CIt("should block connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, false), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should allow connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, true), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should block connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, false), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
		})

		Context("kube-addon-manager", func() {

			BeforeEach(func() {
				sourcePod = KubeAddonManager9090
			})

			CIt("should allow connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, true), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should block connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, false), DefaultTestTimeout)
			CIt("should block connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, false), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should block connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, false), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
		})

		Context("kube-controller-manager-https", func() {

			BeforeEach(func() {
				sourcePod = KubeControllerManagerHttps10257
			})

			CIt("should allow connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, true), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should block connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, false), DefaultTestTimeout)
			CIt("should block connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, false), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should block connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, false), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
		})

		Context("kube-controller-manager-http", func() {

			BeforeEach(func() {
				sourcePod = KubeControllerManagerHttp10252
			})

			CIt("should allow connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, true), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should block connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, false), DefaultTestTimeout)
			CIt("should block connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, false), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should block connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, false), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
		})

		Context("kube-scheduler-http", func() {

			BeforeEach(func() {
				sourcePod = KubeSchedulerHttp10251
			})

			CIt("should allow connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, true), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should block connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, false), DefaultTestTimeout)
			CIt("should block connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, false), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should block connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, false), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
		})

		Context("kube-scheduler-https", func() {

			BeforeEach(func() {
				sourcePod = KubeSchedulerHttps10259
			})

			CIt("should allow connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, true), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, false), DefaultTestTimeout)
			CIt("should block connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, false), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should block connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, false), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
		})

		Context("kube-state-metrics-shoot", func() {

			BeforeEach(func() {
				sourcePod = KubeStateMetricsShoot8080
			})

			CIt("should allow connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, true), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should block connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, false), DefaultTestTimeout)
			CIt("should block connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, false), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should block connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, false), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
		})

		Context("kube-state-metrics-seed", func() {

			BeforeEach(func() {
				sourcePod = KubeStateMetricsSeed8080
			})

			CIt("should block connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should block connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, false), DefaultTestTimeout)
			CIt("should block connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, false), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should allow connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, true), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
			CIt("should allow connection to Seed Kube APIServer (kubernetes.default:443)", assertEgresssToHost(SeedKubeAPIServerPort443, true), DefaultTestTimeout)
		})

		Context("machine-controller-manager", func() {

			BeforeEach(func() {
				sourcePod = MachineControllerManager10258
			})

			CIt("should allow connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, true), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should block connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, false), DefaultTestTimeout)
			CIt("should block connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, false), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should allow connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, true), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
			CIt("should allow connection to Seed Kube APIServer (kubernetes.default:443)", assertEgresssToHost(SeedKubeAPIServerPort443, true), DefaultTestTimeout)
		})

		Context("csi-plugin-controller", func() {

			BeforeEach(func() {
				sourcePod = CsiPluginController80
			})

			CIt("should allow connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, true), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, false), DefaultTestTimeout)
			CIt("should block connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, false), DefaultTestTimeout)
			CIt("should block connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, false), DefaultTestTimeout)
			CIt("should block connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, false), DefaultTestTimeout)
			CIt("should block connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, false), DefaultTestTimeout)
			CIt("should block connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, false), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, false), DefaultTestTimeout)
			CIt("should block connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, false), DefaultTestTimeout)
			CIt("should block connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, false), DefaultTestTimeout)
			CIt("should block connection to prometheus at port 9090", assertEgresssToMirroredPod(Prometheus9090, false), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should allow connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, true), DefaultTestTimeout)
			CIt("should block connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, false), DefaultTestTimeout)
		})

		Context("prometheus", func() {

			BeforeEach(func() {
				sourcePod = Prometheus9090
			})

			CIt("should allow connection to kube-apiserver at port 443", assertEgresssToMirroredPod(KubeApiserver443, true), DefaultTestTimeout)
			CIt("should allow connection to kube-controller-manager-https at port 10257", assertEgresssToMirroredPod(KubeControllerManagerHttps10257, true), DefaultTestTimeout)
			CIt("should allow connection to kube-controller-manager-http at port 10252", assertEgresssToMirroredPod(KubeControllerManagerHttp10252, true), DefaultTestTimeout)
			CIt("should allow connection to kube-scheduler-http at port 10251", assertEgresssToMirroredPod(KubeSchedulerHttp10251, true), DefaultTestTimeout)
			CIt("should allow connection to kube-scheduler-https at port 10259", assertEgresssToMirroredPod(KubeSchedulerHttps10259, true), DefaultTestTimeout)
			CIt("should allow connection to etcd-main at port 2379", assertEgresssToMirroredPod(EtcdMain2379, true), DefaultTestTimeout)
			CIt("should allow connection to etcd-events at port 2379", assertEgresssToMirroredPod(EtcdEvents2379, true), DefaultTestTimeout)
			CIt("should allow connection to cloud-controller-manager-http at port 10253", assertEgresssToMirroredPod(CloudControllerManagerHttp10253, true), DefaultTestTimeout)
			CIt("should block connection to elasticsearch-logging at port 9200", assertEgresssToMirroredPod(ElasticsearchLogging9200, false), DefaultTestTimeout)
			CIt("should block connection to grafana at port 3000", assertEgresssToMirroredPod(Grafana3000, false), DefaultTestTimeout)
			CIt("should block connection to kibana-logging at port 5601", assertEgresssToMirroredPod(KibanaLogging5601, false), DefaultTestTimeout)
			CIt("should allow connection to kube-state-metrics-seed at port 8080", assertEgresssToMirroredPod(KubeStateMetricsSeed8080, true), DefaultTestTimeout)
			CIt("should allow connection to kube-state-metrics-shoot at port 8080", assertEgresssToMirroredPod(KubeStateMetricsShoot8080, true), DefaultTestTimeout)
			CIt("should allow connection to machine-controller-manager at port 10258", assertEgresssToMirroredPod(MachineControllerManager10258, true), DefaultTestTimeout)
			CIt("should block connection to kube-addon-manager at port 9090", assertEgresssToMirroredPod(KubeAddonManager9090, false), DefaultTestTimeout)
			CIt("should block connection to csi-plugin-controller at port 80", assertEgresssToMirroredPod(CsiPluginController80, false), DefaultTestTimeout)
			CIt("should block connection to Metadata service (100.100.100.200:80)", assertEgresssToHost(MetadataservicePort80, false), DefaultTestTimeout)
			CIt("should allow connection to External host (8.8.8.8:53)", assertEgresssToHost(ExternalhostPort53, true), DefaultTestTimeout)
			CIt("should allow connection to Garden Prometheus (prometheus-web.garden:80)", assertEgresssToHost(GardenPrometheusPort80, true), DefaultTestTimeout)
			CIt("should allow connection to Seed Kube APIServer (kubernetes.default:443)", assertEgresssToHost(SeedKubeAPIServerPort443, true), DefaultTestTimeout)
		})
	})
})
